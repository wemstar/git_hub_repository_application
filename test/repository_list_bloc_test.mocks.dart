// Mocks generated by Mockito 5.4.2 from annotations
// in git_hub_repository_application/test/repository_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:git_hub_repository_application/repository.dart' as _i3;
import 'package:git_hub_repository_application/rest_client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestClient_0 extends _i1.SmartFake implements _i2.RestClient {
  _FakeRestClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchRepositoriesResponse_1 extends _i1.SmartFake
    implements _i2.SearchRepositoriesResponse {
  _FakeSearchRepositoriesResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryListRepository extends _i1.Mock
    implements _i3.RepositoryListRepository {
  MockRepositoryListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestClient get restClient => (super.noSuchMethod(
        Invocation.getter(#restClient),
        returnValue: _FakeRestClient_0(
          this,
          Invocation.getter(#restClient),
        ),
      ) as _i2.RestClient);
  @override
  _i4.Future<_i2.SearchRepositoriesResponse> getRepoList(String? searchPhase) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepoList,
          [searchPhase],
        ),
        returnValue: _i4.Future<_i2.SearchRepositoriesResponse>.value(
            _FakeSearchRepositoriesResponse_1(
          this,
          Invocation.method(
            #getRepoList,
            [searchPhase],
          ),
        )),
      ) as _i4.Future<_i2.SearchRepositoriesResponse>);
  @override
  _i4.Future<List<_i2.Repository>> getDefaultRepoList() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultRepoList,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Repository>>.value(<_i2.Repository>[]),
      ) as _i4.Future<List<_i2.Repository>>);
  @override
  _i4.Future<List<_i2.RepositoryIssues>> getRepositoryIssues(
          String? fullName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepositoryIssues,
          [fullName],
        ),
        returnValue: _i4.Future<List<_i2.RepositoryIssues>>.value(
            <_i2.RepositoryIssues>[]),
      ) as _i4.Future<List<_i2.RepositoryIssues>>);
  @override
  _i4.Future<List<_i2.RepositoryPulls>> getRepositoryPulls(String? fullName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepositoryPulls,
          [fullName],
        ),
        returnValue: _i4.Future<List<_i2.RepositoryPulls>>.value(
            <_i2.RepositoryPulls>[]),
      ) as _i4.Future<List<_i2.RepositoryPulls>>);
}
